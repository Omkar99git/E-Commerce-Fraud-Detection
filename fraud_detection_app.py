# -*- coding: utf-8 -*-
"""fraud_detection_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G-nXGjSiIEehKZE8BLEe3ttho-Km0QA5
"""





import streamlit as st
import pickle
import pandas as pd
import numpy as np

# Load the model
try:
    with open('random_forest_model (1).pkl', 'rb') as f:
        rf = pickle.load(f)
except FileNotFoundError:
    st.error("Model file not found. Please ensure 'random_forest_model (1).pkl' is in the same directory.")
    st.stop()

# Define the list of important features
# This list should match the output from the previous step where important features were identified
important_features = ['session_length', 'checkout_speed', 'avg_tx_amount_user', 'deviation_from_avg_tx', 'payment_method_credit_card', 'item_category_luxury', 'name_mismatch_score', 'item_category_fashion', 'account_device_count', 'account_ip_count', 'payment_method_debit_card', 'transaction_frequency_7d', 'billing_country_Morocco', 'item_category_gift_cards', 'shipping_country_Libya']

# Get the full list of features the model was trained on
# This is crucial for creating the input DataFrame correctly
# We need to reconstruct the one-hot encoded columns
model_features = rf.feature_names_in_


# Streamlit application layout
st.title('Fraud Detection Model Deployment')
st.write('Enter the transaction details below to predict if it is fraudulent.')

# Create input form for important features
input_data = {}

# Dictionary to map original categorical feature names to their one-hot encoded columns
categorical_mapping = {
    'payment_method': ['payment_method_credit_card', 'payment_method_debit_card'],
    'item_category': ['item_category_luxury', 'item_category_fashion', 'item_category_gift_cards'],
    'billing_country': ['billing_country_Morocco'],
    'shipping_country': ['shipping_country_Libya']
}

# Collect input for important features
st.header("Important Features Input")

# Separate numerical and categorical important features
numerical_important_features = [f for f in important_features if f not in [col for sublist in categorical_mapping.values() for col in sublist]]
categorical_important_features_encoded = [f for f in important_features if f in [col for sublist in categorical_mapping.values() for col in sublist]]

# Handle numerical inputs
for feature in numerical_important_features:
    input_data[feature] = st.number_input(f'Enter {feature}', value=0.0)

# Handle categorical inputs - we need to map back to original categories for user
st.subheader("Categorical Features")

# Reverse mapping for user input display
reverse_categorical_mapping = {}
for original_cat, encoded_cols in categorical_mapping.items():
    for col in encoded_cols:
        reverse_categorical_mapping[col] = original_cat

# Get unique original categorical features from important encoded features
original_important_categorical_features = list(set([reverse_categorical_mapping[col] for col in categorical_important_features_encoded]))

for original_feature in original_important_categorical_features:
    if original_feature == 'payment_method':
        payment_method = st.selectbox('Select Payment Method', ['bank_transfer', 'credit_card', 'debit_card', 'google_pay', 'paypal'])
        if 'payment_method_credit_card' in important_features:
             input_data['payment_method_credit_card'] = 1 if payment_method == 'credit_card' else 0
        if 'payment_method_debit_card' in important_features:
             input_data['payment_method_debit_card'] = 1 if payment_method == 'debit_card' else 0
        # Handle other payment methods that are not in important_features but were used in training
        if 'payment_method_bank_transfer' in model_features:
             input_data['payment_method_bank_transfer'] = 1 if payment_method == 'bank_transfer' else 0
        if 'payment_method_google_pay' in model_features:
             input_data['payment_method_google_pay'] = 1 if payment_method == 'google_pay' else 0
        if 'payment_method_paypal' in model_features:
             input_data['payment_method_paypal'] = 1 if payment_method == 'paypal' else 0

    elif original_feature == 'item_category':
        item_category = st.selectbox('Select Item Category', ['electronics', 'fashion', 'gift_cards', 'groceries', 'home', 'luxury', 'sports'])
        if 'item_category_luxury' in important_features:
            input_data['item_category_luxury'] = 1 if item_category == 'luxury' else 0
        if 'item_category_fashion' in important_features:
            input_data['item_category_fashion'] = 1 if item_category == 'fashion' else 0
        if 'item_category_gift_cards' in important_features:
            input_data['item_category_gift_cards'] = 1 if item_category == 'gift_cards' else 0
        # Handle other item categories that are not in important_features but were used in training
        if 'item_category_electronics' in model_features:
             input_data['item_category_electronics'] = 1 if item_category == 'electronics' else 0
        if 'item_category_groceries' in model_features:
             input_data['item_category_groceries'] = 1 if item_category == 'groceries' else 0
        if 'item_category_home' in model_features:
             input_data['item_category_home'] = 1 if item_category == 'home' else 0
        if 'item_category_sports' in model_features:
             input_data['item_category_sports'] = 1 if item_category == 'sports' else 0

    elif original_feature == 'billing_country':
        billing_country = st.selectbox('Select Billing Country', ['Algeria', 'Egypt', 'Libya', 'Morocco', 'Tunisia'])
        if 'billing_country_Morocco' in important_features:
            input_data['billing_country_Morocco'] = 1 if billing_country == 'Morocco' else 0
        # Handle other billing countries
        if 'billing_country_Algeria' in model_features:
             input_data['billing_country_Algeria'] = 1 if billing_country == 'Algeria' else 0
        if 'billing_country_Egypt' in model_features:
             input_data['billing_country_Egypt'] = 1 if billing_country == 'Egypt' else 0
        if 'billing_country_Libya' in model_features:
             input_data['billing_country_Libya'] = 1 if billing_country == 'Libya' else 0
        if 'billing_country_Tunisia' in model_features:
             input_data['billing_country_Tunisia'] = 1 if billing_country == 'Tunisia' else 0


    elif original_feature == 'shipping_country':
        shipping_country = st.selectbox('Select Shipping Country', ['Algeria', 'Egypt', 'Libya', 'Morocco', 'Tunisia'])
        if 'shipping_country_Libya' in important_features:
            input_data['shipping_country_Libya'] = 1 if shipping_country == 'Libya' else 0
        # Handle other shipping countries
        if 'shipping_country_Algeria' in model_features:
             input_data['shipping_country_Algeria'] = 1 if shipping_country == 'Algeria' else 0
        if 'shipping_country_Egypt' in model_features:
             input_data['shipping_country_Egypt'] = 1 if shipping_country == 'Egypt' else 0
        if 'shipping_country_Morocco' in model_features:
             input_data['shipping_country_Morocco'] = 1 if shipping_country == 'Morocco' else 0
        if 'shipping_country_Tunisia' in model_features:
             input_data['shipping_country_Tunisia'] = 1 if shipping_country == 'Tunisia' else 0


# Add input for other important features that are not categorical (e.g., binary flags)
# You need to manually add inputs for features like 'new_device_flag', 'multiple_cards_on_account', etc.
# if they are in your important_features list but not in the categorical_mapping.
# For this example, let's assume all other important features are numerical or binary.
# You should check your 'important_features' list and add appropriate st.checkbox or st.number_input for them.
# Example:
# if 'new_device_flag' in important_features:
#     input_data['new_device_flag'] = st.checkbox('New Device Flag')

# It's essential to include ALL features the model was trained on, even if they are not in the 'important_features' list,
# but set their values to 0 or a default for features not explicitly asked from the user.
# This ensures the input DataFrame has the correct shape and column names.

# Initialize all model features to 0 in the input_data dictionary
for feature in model_features:
    if feature not in input_data:
        input_data[feature] = 0

# Create DataFrame from input data, ensuring correct column order
input_df = pd.DataFrame([input_data], index=[0])

# Reorder columns to match the model's training features
input_df = input_df[model_features]

# Prediction button
if st.button('Predict Fraud'):
    # Make prediction
    prediction_proba = rf.predict_proba(input_df)[:, 1]

    # Use a lower threshold for fraud classification
    fraud_threshold = 0.1 # This threshold can be adjusted based on desired recall/precision trade-off
    is_fraud = prediction_proba[0] >= fraud_threshold

    st.subheader('Prediction Result')
    if is_fraud:
        st.error(f'Likely Fraudulent Transaction (Probability: {prediction_proba[0]:.4f})')
    else:
        st.success(f'Legitimate Transaction (Probability: {prediction_proba[0]:.4f})')

    st.write("Note: This is a model prediction and should be used as an indicator. Further investigation may be required.")

